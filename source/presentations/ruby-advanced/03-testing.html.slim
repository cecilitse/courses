---
title:            Formation Ruby on Rails Avancé - Testing
layout:           presentation
meta_description: 'Test-Driven Development, RSpec, quoi tester & tester du code existant.'
noindex:          true
---

| # Testing
  ## Jour 3

  ---

  ## Topics

  * Test-Driven Development (TDD)
  * RSpec
  * Gems indispensables
  * Quoi tester ?
  * Tester l'existant

  ---

  ## Test-Driven Development (TDD)

  --

  ## Test-Driven Development (TDD)

  ### Principes

  * Faire un prototype (en console ou en dehors du projet)
  * Ecrite un test
  * Lancer le test et le voir échouer
  * Développer la foncionnalité associée
  * Lancer le test et le voir passer
  * Refactorer
  * Répéter

  --

  ## Test-Driven Development (TDD)

  ### Avantages

  * Force à d'abord formaliser le comportement attendu
  * Moins fragile
  * Maintenabilité
  * Refactoring
  * Debug

  ---

  ## RSpec

  --

  ## RSpec

  LE framework de **référence** pour tester des projets Ruby on Rails.

  *+ populaire que Minitest*

  http://rspec.info/

  --

  ## RSpec

  ### Version 2

  ```
  require 'spec_helper'

  describe Artist do
    subject(:artist) do
      Artist.new(first_name: 'Mikael', last_name: 'Akerfeldt', band: band)
    end

    let(:band) { Band.new(name: 'Opeth') }

    describe '#band_name' do ... end

    describe '#full_name' do
      it 'returns the first name and last name' do
        artist.full_name.should == 'Mikael Akerfeldt'
      end
    end
  end
  ```

  --

  ## RSpec

  ### Version 3

  ```
  require 'rails_helper'

  describe Artist, type: 'model' do
    subject(:artist) do
      Artist.new(first_name: 'Mikael', last_name: 'Akerfeldt', band: band)
    end

    let(:band) { Band.new(name: 'Opeth') }

    describe '#band_name' do ... end

    describe '#full_name' do
      it 'returns the first name and last name' do
        expect(artist.full_name).to eq('Mikael Akerfeldt')
      end
    end
  end
  ```

  --

  ## RSpec

  ### Bonnes pratiques

  * Une SEULE assertion par test
  * Nommer ses `subject`
  * Instancier que ce qui est nécessaire
  * Utiliser `let`
  * Utiliser l'ORM, mocks et stubs à bon escient
  * Trier par méthode de classe puis d'instance
  * Trier par ordre alphabethique

  --

  ## RSpec

  ### Faux-amis

  #### RSpec 2

  * be true / be false
  * be_true / be_false

  #### RSpec 3

  * be_truthy / be_falsy
  * be_true / be_false

  ---

  ## Gems

  ### (les indispensables)

  --

  ## Gems (1)

  ### Basics

  * [RSpec](http://rspec.info/)
  * [Shoulda Matchers](https://github.com/thoughtbot/shoulda-matchers/)

  --

  ## Gems (2)

  ### Fixtures (alternative)

  * [Factory Girl](https://github.com/thoughtbot/factory_girl/)

  ### Faking data

  * [Forgery](https://github.com/amatsuda/kaminari/)
  * [Faker](https://github.com/sevenwire/forgery/)

  --

  ## Gems (3)

  ### Tests continus

  * [Guard](http://guardgem.org/)
  * [Spork](http://github.com/sporkrb/spork/)

  ### Web

  * [Capybara](http://github.com/jnicklas/capybara/)

  ---

  ## Quoi tester ?

  --

  ## Quoi tester ? (1)

  ### Impérativement

  * Modèles
  * Polices
  * Services
  * Lib

  --

  ## Quoi tester ? (2)

  ### Fortement recommandé

  * Contrats
  * Formulaires

  ### De préférence

  * Décorateurs
  * Présenteurs

  --

  ## Quoi tester ? (3)

  ### Optionnel

  * Helpers
  * Contrôlleurs
  * Tests d'intégration

  ---

  ## Tester l'existant

  --

  ## Tester l'existant

  * **Quand ?**
    * Lorsqu'un changement doit être effectué
  * **Quoi ?**
    * Uniquement la partie concernée

  ---

  ## Happy Hacking!
