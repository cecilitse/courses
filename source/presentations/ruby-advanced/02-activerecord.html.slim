---
title:            Formation Ruby on Rails Avancé - SQL & ActiveRecord
layout:           presentation
meta_description: 'Optimisation de requêtes, scopes & query objects.'
noindex:          true
---

| # SQL & Active Record

  ---

  ## Sujets

  - Index
  - Optimisation de requêtes
  - Scopes & Query objects

  ---

  ## Index SQL

  Accéder à l'information de façon plus efficace.

  --

  ### Quoi indexer ?

  - Sur toute **clef étrangère**
    (comportement par défaut sur Ruby on Rails 5)
  - Sur tout champ dont la valeur est **unique**
  - Sur tout champ sur lequel on fait souvent une requête

  --

  Il est possible de placer un index sur **plusieurs champs**

  --

  ### Migrations

  ```
  add_index :table_name, :column_name, options: {}
  add_index :table_name, [:column_1, :column_2], options: {}
  ```

  ---

  ## Optimisation de requêtes

  Essayer de toujours faire le moins de requêtes possibles.

  --

  ### Postulat

  ![DB Schema](/assets/images/presentations/ruby-advanced/db-schema.png)

  --

  ### Joins

  Par défaut, c'est l'équivalent d'un `INNER JOIN`.

  ```
  Album.joins(:artist).where(artists: { name: 'Daft Punk' })

  => SELECT * FROM albums
     INNER JOIN artists ON artists.id = albums.artist_id
     WHERE artists.name = 'Daft Punk'
  ```

  --

  On peut changer le type de jointure.

  ```
  # Rails 5
  Album.left_outer_joins(:artist)

  # Rails < 4
  Album.joins("LEFT OUTER JOIN artists ON artists.id = albums.artist_id")
  ```

  --

  ### Preload / Eager load / Includes

  Permet d'éviter le problème des requêtes N+1.

  **Le problème**

  ```
  # controller
  @albums = Album.all

  # view
  <% @albums.each do |album| %>
    <%= album.artist.name %>
  <% end %>

  => SELECT * FROM albums
     SELECT * FROM artists WHERE id = 1
     SELECT * FROM artists WHERE id = 2
     ...
  ```

  --

  Chacune fonctionne différemment.

  --

  ### Preload

  Pour chaque association, Active Record effectue **une seule requête** supplémentaire.

  ```
  Album.preload(:artist)

  => SELECT * FROM albums
     SELECT * FROM artists WHERE id IN (1, 2, ...)
  ```

  --

  ### Eager load

  Effectue un `LEFT OUTER JOIN`

  ```
  Album.eager_load(:artist)

  => SELECT * FROM albums
     LEFT OUTER JOIN artists ON artists.id = albums.artist_id
  ```

  --

  ### Includes

  Laisse le choix à Active Record de faire soit un `preload`, soit un `eager_load`

  - Par défaut, effectue **2 requêtes**
  - Une condition sur la table associée implique une seule requête avec un `LEFT OUTER JOIN`

  ---

  ## Scopes & Query objects

  Où définir nos requêtes ?

  --

  ### Scopes - The Rails Way

  On pre-enregistre des parties de nos requêtes dans le modèle.

  ```
  class Artist < ApplicationRecord
    scope :available, -> { where(available: true) }
    scope :by_genre,  -> (genre) { where(genre: genre) }
  end

  Artist.available
  Artist.by_genre('Electronica')
  ```

  Permet d'alléger nos contrôleurs.

  --

  Comment faire quand on commence à avoir énormément de scopes dans nos modèles ?

  --

  ### Query objects

  PORO (Plain Old Ruby Objects)

  --

  ### La base

  ```
  # app/queries/artist_query.rb
  class ArtistQuery
    attr_reader :relation

    def self.relation(base_relation=nil)
      query = new(base_relation)
      query.relation
    end

    def initialize(base_relation=nil)
      base_relation = Artist.all unless base_relation
      @relation     = base_relation.extending(Scopes)
    end

    module Scopes
      # where your "scopes" will go
    end
  end
  ```

  --

  ### Nos scopes

  ```
  # app/queries/artist_query.rb
  class ArtistQuery
    # here lies initialization code

    module Scopes
      def available
        where(available: true)
      end

      def by_genre(genre)
        where(genre: genre)
      end
    end
  end
  ```

  --

  ### Utilisation de notre query

  ```
  # All artists
  ArtistQuery.relation

  # Available artists
  ArtistQuery.relation.available

  # Metal artists
  ArtistQuery.relation.by_genre('Metal').order(:name)
  ```

  --

  ### Performance

  Cette implémentation, un peu simple, engendre un problème de **performance**.

  A chaque utilisation du query object, nous **étendons** notre modèle, engendrant **l'invalidation** du Ruby global method cache.

  [Plus d'infos ici](http://dev.mensfeld.pl/2015/04/ruby-global-method-cache-invalidation-impact-on-a-single-and-multithreaded-applications/)

  --

  Nous allons plutôt **déléguer** nos requêtes ActiveRecord à l'objet ActiveRecord::Relation.

  Nous utiliserons un **SimpleDelegator** pour cela.

  --

  ### Base Query

  ```
  # app/queries/base_query.rb
  require 'delegate'

  class BaseQuery < SimpleDelegator
    def self.relation(base_relation, base_model)
      base_relation ||= base_model.all
      new(base_relation)
    end

    def self.method_added(method_name)
      return if @redefining
      @redefining = true

      alias_method :"_\#{method_name}", method_name

      define_method method_name do |*args, &block|
        result = send(:"_\#{method_name}", *args, &block)

        if result.class == __getobj__.class
          self.class.new(result)
        else
          result
        end
      end

      @redefining = false
    end
  end
  ```

  --

  ### Artist Query

  ```
  class ArtistQuery < BaseQuery
    def self.relation(base_relation=nil)
      super(base_relation, Artist)
    end

    def available
      where(available: true)
    end

    def by_genre(genre)
      where(genre: genre)
    end
  end
  ```

  --

  ### Pourquoi des query objects ?

  - Garder de petits modèles
  - Extraire les requêtes des modèles
  - Possibilité d'avoir un query object par modèle, contexte, etc.

  --

  ## Pour & Contre

  <table>
    <thead>
      <tr>
        <th></th>
        <th>Pour</th>
        <th>Contre</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Scopes</td>
        <td>La Rails Way</td>
        <td>Scopes perdus dans nos modèles, au mileu de nos méthodes de classe / d'instance et DSL en tout genre</td>
      </tr>
      <tr>
        <td>Query objects</td>
        <td>Separation of concerns</td>
        <td>Plus complexe</td>
      </tr>
    </tbody>
  </table>

  ---

  ## Happy Hacking!

  [Query Objects example](https://github.com/cveneziani/query-objects-example/)
