---
title:            Formation Ruby on Rails Avancé - Structurer son application
layout:           presentation
meta_description: 'The Rails Way & the Rails Other Way'
noindex:          true
---

| # Structurer son application

  ---

  ## Sujets

  - Structure type (The Rails Way)
  - Structure avancée (The Rails Other Way)

  ---

  ## Structure type

  --

  ### Composants

  - Modèles
  - Vues
  - Contrôleurs
  - Helpers
  - Lib

  --

  ### Modèles

  - Persistence
  - Validations
  - Requêtes SQL
  - Logique métier

  --

  ### Vues

  - Gestion du rendu (HTML, JSON, etc.)
  - Accompagnée de logique (souvent)

  --

  ### Contrôleurs

  - Gestion requête web
  - Interface avec les modèles
  - Contient également beaucoup de logique métier

  --

  ### Helpers

  - Extraction de la logique des vues
  - Modules au contenu non structuré

  ### Lib

  - Modules externes à la logique métier

  --

  ### The Rails Way... to a dirty code

  On retrouve de la **logique métier** à travers toutes les couches : modèles, vues, contrôleurs.

  ---

  ## Structure avancée

  --

  > "A class should have only one reason to change"
  > Robert C. Martin

  --

  ### Single Responsibility Principle (SRP)

  - Meilleure structure de code
  - Faible couplage & Plus robuste
  - Maintenabilité & Refactoring
  - Testabilité & Debug

  *Source : article d'[Eyal Golan](http://eyalgo.com/2014/02/01/the-single-responsibility-principle/)*

  --

  Quels composants supplémentaires vont nous permettre d'obtenir une application respectant le SRP ?

  --

  ## Nouveaux composants

  - Décorateurs
  - Présenteurs
  - Formulaires
  - Contrats
  - Polices
  - Services

  ---

  ## Décorateurs & Présenteurs

  --

  ### Décorateurs

  Un décorateur vient ajouter une **nouvelle fonctionnalité** à un modèle.

  On dit qu'il vient `étendre` une classe.

  Dans un environnement Ruby on Rails, un décorateur peut être comparé à un `Concern`.

  --

  ### Présenteurs

  Un présenteur vient ajouter une fonctionnalité de **présentation** à un modèle.

  On peut considérer un présenteur comme étant un décorateur de présentation.

  --

  Dans la plupart des cas, l'usage de décorateur est à **PROSCRIRE** lorsqu'il s'agit d'ajouter une fonctionnalité qui **relève de la logique métier**.

  --

  ### Mise en place

  ```
  # app/presenters/album_presenter.rb
  require 'delegate'

  class AlbumPresenter < SimpleDelegator
    def self.wrap(albums, &block)
      albums.map { |album| new(album) }
    end

    def total_duration
      tracks.sum(:duration)
    end
  end
  ```

  --

  ### Utilisation

  ```
  album = Album.first
  presented_album = AlbumPresenter.new(album)

  puts presented_album.name
  puts presented_album.total_duration
  ```

  --

  ### Aller plus loin

  Un bon article sur le sujet : [Decorators Compared To Strategies, Composites, and Presenters](http://robots.thoughtbot.com/decorators-compared-to-strategies-composites-and)

  ---

  ## Formulaires & Contrats

  --

  ### Formulaires

  Un formulaire **encapsule** dans un objet les champs d'un modèle et a ses propres règles de validation.

  Il reçoit les **données saisies** par l'utilisateur et se charge de les valider avant de les enregistrer.

  --

  Il permet donc de **découpler** la vue (saisie utilisateur) du modèle (persistence) en extrayant les validations du modèle.

  --

  Une gem était disponible : [Reform](https://github.com/apotonick/reform)

  Autre piste : [dry-validation](https://dry-rb.org/gems/dry-validation/)

  #### Les plus

  - Agnostique niveau framework & ORM
  - S'interface avec `form_for`, `simple_form`, etc.

  --

  Alternative avec ActiveModel

  ```
  # app/forms/album_form.rb
  class AlbumForm
    include ActiveModel::Model

    attr_accessor :artist, :name, :release_date

    validates :artist, presence: true
    validates :name,   presence: true

    def save
      return false unless valid?
      Album.new(artist: artist, name: name, release_date: release_date).save
    end
  end
  ```

  --

  ### Contrats

  Un contrat permet de valider **l'état d'un modèle**.

  Tout comme un formulaire, il est composé de validations.

  --

  A l'inverse d'un formulaire, il ne reçoit pas des données de l'utilisateur. Il reçoit uniquement le modèle à valider.

  Il permet d'extraire les validations du modèle (persistence).

  --

  Une gem était disponible : [Reform](https://github.com/apotonick/reform) (oui, la même)

  En alternative, ActiveModel s'y prête bien aussi.

  --

  ### Pourquoi formulaires et contrats ?

  - Permet d'avoir plus de souplesse sur les formulaires.
  - Permet d'avoir des validations propres à chaque contexte.
  - Le modèle redevient juste un ORM.

  ---

  ## Polices

  --

  Une police permet de déterminer si une/des opérations peut/peuvent être réalisée(s) par un utilisateur donné.

  --

  Une gem est disponible : [Pundit](https://github.com/elabs/pundit)

  Dans certains cas, son utilisation peut être "overkill" comparativement à une police maison (PORO).

  ---

  ## Services

  --

  Un service ajoute UNE opération basée sur un modèle.

  A l'inverse du décorateur, le service utilise un modèle mais ne vient pas l'enrichir.

  --

  ### Exemple

  ```
  # app/services/register_artist_to_gig_service.rb
  class RegisterArtistToGigService
    def initialize(artist)
      @artist = artist
    end

    def call
      # here goes the specific code
    end
  end
  ```

  --

  ### Utilisation

  ```
  # app/controllers/gigs_controller.rb
  class GigsController < ApplicationController
    [...]

    def create
      artist = Artist.find(params[:artist_id])
      RegisterArtistToGigService.new(@artist).call
      [...]
    end
  end
  ```

  ---

  ## Mise en place

  --

  ### Le contrôleur

  - Instancie un modèle
  - Instancie un formulaire avec le modèle
  - Instancie un service avec le formulaire / le modèle
  - Instancie un présenter avec le modèle
  - Intéragit avec une police

  --

  ### La vue : partial, présenteur & helper

  - Intéragit uniquement avec le formulaire / le modèle
  - Peut recevoir un modèle qui est enrichi par un présenteur
  - Utilise les methodes helper pour toute logique propre à la présentation (ex : formattage de donnée)
  - Évite toute duplication de code HTML via l'utilisation de partials

  --

  ### Le service

  - Intéragit avec le formulaire / le modèle
  - Intéragit avec un contrat

  --

  ### La police

  - Se base sur le modèle et l'utilisateur

  ---

  ## Aller plus loin

  [7 Patterns to Refactor Fat ActiveRecord Models](http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/)

  ---

  ## Happy Hacking!
